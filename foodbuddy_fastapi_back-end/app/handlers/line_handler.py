from linebot.v3 import WebhookHandler
from linebot.v3.messaging import (
    ApiClient, Configuration, MessagingApi, MessagingApiBlob, ReplyMessageRequest, TextMessage,
    QuickReply, QuickReplyItem, MessageAction, CameraAction, URIAction
)
from linebot.v3.messaging import FlexMessage, FlexContainer
from linebot.v3.webhooks import MessageEvent, TextMessageContent, ImageMessageContent, FollowEvent
from linebot.v3.messaging.models.show_loading_animation_request import ShowLoadingAnimationRequest

import os
import json
from dotenv import load_dotenv

# Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
from services.image_service import predict_image
from services.user_data import incorrect_predict, save_eat_history, user_giveNew_data, user_report
from utils.create_flex import create_flex_bubble, goto_history, goto_settingTarget
from utils.file_utils import save_image, remove_image

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ ENV
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
get_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
handler = WebhookHandler(os.getenv('LINE_CHANNEL_SECRET'))
configuration = Configuration(access_token=get_access_token)

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
user_corrections = {}


def initialize_user_data(user_id):
    """ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ """
    user_corrections.setdefault(user_id, {
        "status": None, "image_receive": False, "image_path": None,
        "nutrition": None, "food_name": None, "food_type": None, 
        "report": False, "report_message": None
    })
    return user_corrections[user_id]


def send_reply(line_bot_api, reply_token, text, quick_reply=None):
    """ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ """
    message = TextMessage(text=text, quick_reply=quick_reply) if quick_reply else TextMessage(text=text)
    line_bot_api.reply_message(ReplyMessageRequest(replyToken=reply_token, messages=[message]))


def create_quick_reply():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å """
    return QuickReply(items=[
        QuickReplyItem(action=CameraAction(label="‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£")),
        QuickReplyItem(action=URIAction(label="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô", uri="https://web-foodbuddy.vercel.app/")),
        QuickReplyItem(action=URIAction(label="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", uri="https://web-foodbuddy.vercel.app/"))
    ])


def start_loading_animation(user_id):
    """ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô """
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        line_bot_api.show_loading_animation(ShowLoadingAnimationRequest(chat_id=user_id, loadingSeconds=10))

# def goto_settingTarget():
#     return URIAction(label="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", uri="https://web-foodbuddy.vercel.app/dashboard/setting")


@handler.add(MessageEvent, message=ImageMessageContent)
def handle_image(event: MessageEvent):
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        line_bot_blob_api = MessagingApiBlob(api_client)
        user_id = event.source.user_id
        user_data = initialize_user_data(user_id)
        start_loading_animation(user_id)
        file_name = save_image(event.message.id, line_bot_blob_api)
        if file_name:
            predict_result = predict_image(file_name)
            image_url = f"{os.getenv('API_URL')}/images/{event.message.id}.jpg"

            if predict_result[0]["name"] == "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ":
                send_reply(line_bot_api, event.reply_token, "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡πÄ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡∏π‡∏â‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏≠‡∏ï‡∏¥‡∏° | ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏° ‡πÇ‡∏î‡∏¢‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡πÄ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π")
                user_data.update({"status": "unknown", "image_receive": True, "image_path": file_name})
            else:
                nutrition_json = predict_result[0].get('nutration')
                if nutrition_json:
                    user_data.update({
                        "food_name": predict_result[0]['name'],
                        "food_type": predict_result[0]['food_type'],
                        "nutrition": json.loads(nutrition_json),
                        "image_receive": True,
                        "image_path": file_name
                    })
                    bubble = create_flex_bubble(image_url, predict_result)
                    line_bot_api.reply_message(ReplyMessageRequest(replyToken=event.reply_token, messages=[bubble]))
                else:
                    send_reply(line_bot_api, event.reply_token, f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {predict_result[0]['name']}")
                    user_data.update({"status": "wrong", "image_receive": True, "image_path": file_name})


@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event: MessageEvent):
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        user_id = event.source.user_id
        user_data = initialize_user_data(user_id)
        message_text = event.message.text

        start_loading_animation(user_id)

        print(user_data)

        if message_text in ["‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π"]:
            reply_text = "‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞!" if user_data["image_receive"] else "‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞!"
            user_data["status"] = "edit" if user_data["image_receive"] else None
        elif message_text in ["‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ"]:
            reply_text = """üîπ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LINE Chat Bot
‚úÖ 1. ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    üîπ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‚Üí ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
    üîπ ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
    üîπ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    üîπ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‚Üí ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
‚úÖ 2.‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Dashboard)
    üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‚Üí ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    üîπ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    üîπ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Real-time
            """
        elif message_text in ["‡πÄ‡πÄ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]:
            reply_text = "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞!"
            user_data["report"] = True
            user_data["report_message"] = None
        elif message_text in ["‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô", "‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"]:
           
            reply_text = "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞!"

            flex_contents = goto_history()
            flex_message = FlexMessage(alt_text="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", contents=FlexContainer.from_dict(flex_contents))

            line_bot_api.reply_message(
                ReplyMessageRequest(
                    replyToken=event.reply_token,
                    messages=[flex_message]
                )
            )
            return

        elif message_text in ["‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"]:
           
            
            reply_text = "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

            flex_contents = goto_settingTarget()
            flex_message = FlexMessage(alt_text="‡∏î‡∏π‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", contents=FlexContainer.from_dict(flex_contents))

            line_bot_api.reply_message(
                ReplyMessageRequest(
                    replyToken=event.reply_token,
                    messages=[flex_message]
                )
            )
            return

        elif message_text == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å":
            if user_data["image_receive"]:
                
                save_result = save_eat_history({
                    "user_lineId": user_id,
                    "calories": user_data["nutrition"].get("calories"),
                    "carbs": user_data["nutrition"].get("carbs"),
                    "fat": user_data["nutrition"].get("fat"),
                    "protein": user_data["nutrition"].get("protein"),
                    "food_name": user_data["food_name"],
                    "food_type": user_data["food_type"]
                })
                if save_result.get("status") == "success":
                    remove_image(user_data["image_path"])
                    send_reply(line_bot_api, event.reply_token, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", create_quick_reply())
                    user_corrections.pop(user_id, None)  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                return
            else:
                reply_text = "‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞!"
        elif user_data["status"] == "unknown":
            # print("this is input :", message_text)
            reply_text = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏Ñ‡πà‡∏∞! ‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞!"

            # ---------------------------------------------------------------------------- #
            #                                   API CHECK                                  #
            # ---------------------------------------------------------------------------- #
            data = {
                "food_name": message_text,
                "image_path": user_data["image_path"]
            }
            user_giveNew_data(user_id, data)

        elif user_data["report"] == True:  
            user_data["report_message"] = message_text
            reply_text = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏Ñ‡πà‡∏∞! ‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞!"

            user_report(user_id, user_data["report_message"])
            # ---------------------------------------------------------------------------- #
            # !                       ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Database                             #
            # ---------------------------------------------------------------------------- #
            #               @param user_id : ‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏≠‡∏î‡∏µ                                        #
            #               @param report_message : ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ                      #
            # ---------------------------------------------------------------------------- #
            # ---------------------------------------------------------------------------- #

            
            user_data["report"] = False
            user_data["report_message"] = None
            

        elif user_data["status"] == "edit" and user_data["image_receive"]:
            incorrect_predict({
                "user_Id": user_id,
                "old_food_name": user_data["food_name"],
                "new_food_name": message_text,
                "food_type": user_data["food_type"],
                "nutrition": user_data["nutrition"],
                "image_path": user_data["image_path"]
            })
            send_reply(line_bot_api, event.reply_token, f"‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏õ‡πá‡∏ô '{message_text}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞! üôè")
            user_corrections.pop(user_id, None)  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            return

        else:
            reply_text = "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏≤‡πÄ‡∏•‡∏¢! ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞ üç±üìä"

        send_reply(line_bot_api, event.reply_token, reply_text, create_quick_reply())


@handler.add(FollowEvent)
def handle_follow(event: FollowEvent):
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        send_reply(line_bot_api, event.reply_token, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏≤!", create_quick_reply())
